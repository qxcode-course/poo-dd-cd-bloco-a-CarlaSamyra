{
    "patches": [
        {
            "label": "2025-09-16_19-39-12",
            "content": "@@ -5,24 +5,25 @@\n t (%22\n-oi%22)%0A%0A%0ATowel = %7B%0A%0A%0A%7D\n+Minha toalha %C3%A9 rosa%22)\n",
            "lines": "1"
        },
        {
            "label": "2025-09-16_20-03-10",
            "content": "@@ -1,148 +1,28 @@\n-class Towel:%0A    def __init__(self):%0A        self.color = %22red%22%0A        self.size = %22G%22%0A        self.wetness = 0%0A%0At\n+print (%22oi%22)%0A%0A%0AT\n owel = \n-Towel()%0Aprint(towel.color)\n+%7B%0A%0A%0A%7D\n",
            "lines": "7"
        },
        {
            "label": "2025-09-16_20-08-07",
            "content": "@@ -145,41 +145,4 @@\n lor)\n-%0Aprint(towel.size)%0Aprint(towel.color)\n",
            "lines": "8"
        },
        {
            "label": "2025-09-16_20-08-42",
            "content": "@@ -5,17 +5,16 @@\n s Towel:\n- \n %0A    def\n@@ -31,45 +31,10 @@\n self\n-, color: str, size: str): #construtor\n+):\n %0A   \n@@ -60,19 +60,8 @@\n red%22\n- #atributos\n %0A   \n@@ -125,67 +125,9 @@\n wel(\n-%22green%22, %22G%22) #objetos%0Atoalhas = Towel(%22red%22, %22M%22) #objetos\n+)\n %0Apri\n@@ -172,16 +172,14 @@\n t(towel.\n-wetness\n+color\n )\n",
            "lines": "10"
        },
        {
            "label": "2025-09-16_20-16-55",
            "content": "@@ -87,21 +87,21 @@\n color = \n-color\n+%22red%22\n  #atribu\n@@ -124,20 +124,19 @@\n .size = \n-size\n+%22G%22\n %0A       \n",
            "lines": "11"
        },
        {
            "label": "2025-09-16_20-17-14",
            "content": "@@ -157,110 +157,8 @@\n  = 0\n-%0A    %0A    def __str__(self):%0A        return f%22color:%7Bself.color%7D, tam:%7Bself.size%7D, hum:%7Bself.wetness%7D%22\n %0A%0Ato\n",
            "lines": "11"
        },
        {
            "label": "2025-09-16_20-22-38",
            "content": "@@ -392,18 +392,4 @@\n ess)\n-%0A%0Aprint(towel)\n",
            "lines": "14"
        },
        {
            "label": "2025-09-16_20-23-01",
            "content": "@@ -334,50 +334,8 @@\n etos\n-%0A%0Aprint(towel.color)%0Atowel.color = %22White%22\n %0Apri\n",
            "lines": "16"
        },
        {
            "label": "2025-09-16_20-23-58",
            "content": "@@ -370,11 +370,12 @@\n  = %22\n-Blu\n+Whit\n e%22%0Ap\n",
            "lines": "19"
        },
        {
            "label": "2025-09-22_15-24-47",
            "content": "@@ -185,18 +185,8 @@\n lf):\n- #toString\n %0A   \n",
            "lines": "19"
        },
        {
            "label": "2025-09-22_15-39-08",
            "content": "@@ -157,80 +157,8 @@\n  = 0\n-%0A%0A    def dry(self, amount: int) -%3E None:%0A        self.wetness += amount\n %0A   \n@@ -307,11 +307,8 @@\n etos\n- - \n %0Atoa\n@@ -441,16 +441,16 @@\n tness)%0A%0A\n+\n print(to\n@@ -457,49 +457,4 @@\n wel)\n-%0Aprint(toalhas)%0Atoalhas.dry(3)%0Aprint(toalhas)\n",
            "lines": "19"
        },
        {
            "label": "2025-09-22_15-41-58",
            "content": "@@ -229,200 +229,8 @@\n ount\n-%0A%0A    def getMaxWetness (self) -%3E int :%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30\n %0A   \n@@ -577,33 +577,4 @@\n has)\n-%0Aprint(toalhas.getMaxWetness)\n",
            "lines": "25"
        },
        {
            "label": "2025-09-22_15-44-38",
            "content": "@@ -229,113 +229,8 @@\n ount\n-%0A        if self.wetness %3E= self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self\n %0A%0A  \n@@ -262,16 +262,17 @@\n ) -%3E int\n+ \n :%0A      \n@@ -422,34 +422,8 @@\n  30%0A\n-        return 0%0A        %0A\n     \n@@ -797,7 +797,5 @@\n ness\n-()\n )\n",
            "lines": "34"
        },
        {
            "label": "2025-09-22_15-52-09",
            "content": "@@ -334,37 +334,8 @@\n self\n-.wetness = self.getMaxWetness\n %0A%0A  \n@@ -607,9 +607,11 @@\n n f%22\n-C\n+col\n or:%7B\n@@ -627,15 +627,11 @@\n r%7D, \n-T\n+t\n am\n-anho\n :%7Bse\n@@ -644,15 +644,11 @@\n e%7D, \n-Umidade\n+hum\n :%7Bse\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-53-17",
            "content": "@@ -913,18 +913,17 @@\n has.dry(\n-20\n+3\n )%0Aprint(\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-53-26",
            "content": "@@ -359,18 +359,16 @@\n xWetness\n-()\n %0A%0A    de\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-53-50",
            "content": "@@ -915,17 +915,17 @@\n has.dry(\n-1\n+2\n 0)%0Aprint\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-54-48",
            "content": "@@ -698,21 +698,21 @@\n ness%7D%22%0A%0A\n-minha\n+towel\n  = Towel\n@@ -717,12 +717,13 @@\n el(%22\n-Rosa\n+green\n %22, %22\n@@ -735,16 +735,18 @@\n objetos \n+- \n %0Atoalhas\n@@ -782,29 +782,29 @@\n %0A%0Aprint(\n-minha\n+towel\n .color)%0A\n minha.co\n@@ -795,21 +795,21 @@\n .color)%0A\n-minha\n+towel\n .color =\n@@ -822,21 +822,21 @@\n %22%0Aprint(\n-minha\n+towel\n .color)%0A\n@@ -841,21 +841,21 @@\n )%0Aprint(\n-minha\n+towel\n .size)%0Ap\n@@ -859,21 +859,21 @@\n )%0Aprint(\n-minha\n+towel\n .wetness\n@@ -885,13 +885,13 @@\n int(\n-minha\n+towel\n )%0Apr\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-56-07",
            "content": "@@ -167,14 +167,11 @@\n def \n-secar \n+dry\n (sel\n@@ -258,29 +258,29 @@\n %3E= self.\n-maximaUmidade\n+getMaxWetness\n ():%0A    \n@@ -350,46 +350,46 @@\n elf.\n-maximaUmidade()%0A%0A    def maximaUmidade\n+getMaxWetness()%0A%0A    def getMaxWetness\n  (se\n@@ -949,20 +949,20 @@\n has.\n-maximaUmidade\n+getMaxWetness\n ())\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-58-32",
            "content": "@@ -911,21 +911,19 @@\n toalhas.\n-secar\n+dry\n (10)%0Apri\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-58-49",
            "content": "@@ -776,16 +776,56 @@\n bjetos%0A%0A\n+print(minha.color)%0Aminha.color = %22Blue%22%0A\n print(mi\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_15-59-34",
            "content": "@@ -759,16 +759,11 @@\n el(%22\n-Vermelho\n+red\n %22, %22\n@@ -776,16 +776,75 @@\n bjetos%0A%0A\n+print(minha.color)%0Aprint(minha.size)%0Aprint(minha.wetness)%0A%0A\n print(mi\n",
            "lines": "37"
        },
        {
            "label": "2025-09-22_15-59-53",
            "content": "@@ -809,17 +809,16 @@\n oalhas)%0A\n-%0A\n toalhas.\n@@ -831,23 +831,8 @@\n 10)%0A\n-minha.secar(5)%0A\n prin\n",
            "lines": "33"
        },
        {
            "label": "2025-09-22_16-00-20",
            "content": "@@ -892,33 +892,4 @@\n e())\n-%0Aprint(minha.maximaUmidade())\n",
            "lines": "35"
        },
        {
            "label": "2025-09-22_16-00-45",
            "content": "@@ -810,17 +810,33 @@\n alhas)%0A%0A\n-%0A\n+toalhas.secar(10)\n %0Aminha.s\n@@ -843,17 +843,16 @@\n ecar(5)%0A\n-%0A\n print(to\n",
            "lines": "36"
        },
        {
            "label": "2025-09-22_16-01-05",
            "content": "@@ -810,16 +810,18 @@\n alhas)%0A%0A\n+%0A%0A\n minha.se\n",
            "lines": "38"
        },
        {
            "label": "2025-09-22_16-01-21",
            "content": "@@ -814,26 +814,8 @@\n s)%0A%0A\n-toalhas.secar(10)%0A\n minh\n",
            "lines": "36"
        },
        {
            "label": "2025-09-22_16-01-32",
            "content": "@@ -863,22 +863,8 @@\n as)%0A\n-print(minha)%0A%0A\n prin\n",
            "lines": "37"
        },
        {
            "label": "2025-09-22_16-01-54",
            "content": "@@ -107,43 +107,8 @@\n utos\n- - define o estado da minha toalha \n %0A   \n@@ -578,24 +578,29 @@\n  0%0A        %0A\n+    %0A\n     def __st\n@@ -704,206 +704,236 @@\n s%7D%22%0A\n-    %0A    def isDry (self) -%3E bool :%0A        return self.wetness == 0%0A    %0A    #def wringOut (self) -%3E None :%0A        #return self.wetness = 0%0A%0Adef main (): #2 fun%C3%A7%C3%A3o principal%0A%0A%0Amain() #1. c%C3%B3digo inicia\n+%0Aminha = Towel(%22Rosa%22, %22G%22) #objetos %0Atoalhas = Towel(%22Vermelho%22, %22M%22) #objetos%0A%0Aprint(minha)%0Aprint(toalhas)%0A%0Atoalhas.secar(10)%0Aminha.secar(5)%0A%0Aprint(toalhas)%0Aprint(minha)%0A%0Aprint(toalhas.maximaUmidade())%0Aprint(minha.maximaUmidade())\n",
            "lines": "39"
        },
        {
            "label": "2025-09-22_16-38-40",
            "content": "@@ -747,16 +747,13 @@\n def \n-estaseca\n+isDry\n  (se\n@@ -812,18 +812,21 @@\n     \n+#\n def \n-torcer\n+wringOut\n  (se\n@@ -839,32 +839,40 @@\n  None :%0A        \n+#return \n self.wetness = 0\n@@ -910,604 +910,8 @@\n pal%0A\n-    toalha = Towel (%22%22, %22%22) #3. objeto manipulado%0A    while True: #4. loop infinito%0A        line: str = input() #5. entrada de linha%0A        args: list%5Bstr%5D = line.split(%22 %22) #6. lista de palavras %0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22:%0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel(color, size)%0A        elif args%5B0%5D == %22mostrar%22:%0A            print(toalha)%0A        elif args%5B0%5D == %22seca%22:%0A            amount: int = int(args%5B1%5D)%0A            toalha.secar(amount)%0A        else:%0A            print (%22fail: comando inv%C3%A1lido%22)\n %0A%0Ama\n",
            "lines": "34"
        },
        {
            "label": "2025-09-23_10-24-39",
            "content": "@@ -198,19 +198,21 @@\n     def \n-dry\n+secar\n  (self, \n@@ -413,21 +413,21 @@\n def \n-getMaxWetness\n+maximaUmidade\n  (se\n@@ -671,17 +671,16 @@\n n f%22Cor:\n- \n %7Bself.co\n@@ -693,17 +693,16 @@\n Tamanho:\n- \n %7Bself.si\n@@ -714,17 +714,16 @@\n Umidade:\n- \n %7Bself.we\n@@ -743,21 +743,24 @@\n     def \n-isDry\n+estaseca\n  (self) \n@@ -819,16 +819,14 @@\n def \n-wringOut\n+torcer\n  (se\n@@ -948,21 +948,16 @@\n ipulado%0A\n-    %0A\n     whil\n@@ -982,17 +982,16 @@\n nfinito%0A\n-%0A\n         \n@@ -1100,43 +1100,8 @@\n as %0A\n-        print(%22$%22 + line)%0A        %0A\n     \n@@ -1143,17 +1143,16 @@\n   break%0A\n-%0A\n         \n@@ -1271,17 +1271,16 @@\n , size)%0A\n-%0A\n         \n@@ -1332,17 +1332,16 @@\n toalha)%0A\n-%0A\n         \n@@ -1361,15 +1361,12 @@\n == %22\n-enxugar\n+seca\n %22:%0A \n@@ -1426,161 +1426,21 @@\n lha.\n-dry(amount)%0A%0A        elif args%5B0%5D == %22seca%22:%0A            if toalha.isDry():%0A                print (%22sim%22)%0A            else:%0A                print(%22n%C3%A3o%22)%0A\n+secar(amount)\n %0A   \n@@ -1520,14 +1520,8 @@\n o inicia\n-%0A%0A    \n",
            "lines": "50"
        },
        {
            "label": "2025-09-23_11-11-52",
            "content": "@@ -294,29 +294,29 @@\n %3E= self.\n-getMaxWetness\n+maximaUmidade\n ():%0A    \n@@ -382,29 +382,29 @@\n  = self.\n-getMaxWetness\n+maximaUmidade\n ()%0A%0A    \n",
            "lines": "66"
        },
        {
            "label": "2025-09-23_14-05-29",
            "content": "class Towel: \n    def __init__(self, color: str, size: str): #construtor\n        self.color = color #atributos - define o estado da minha toalha \n        self.size = size\n        self.wetness = 0\n\n    def dry (self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n\n    def getMaxWetness (self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n        \n    def __str__(self): #toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n    \n    def isDry (self) -> bool :\n        return self.wetness == 0\n    \n    def wringOut (self) -> None :\n        self.wetness = 0\n\ndef main (): #2 fun\u00e7\u00e3o principal\n    toalha = Towel (\"\", \"\") #3. objeto manipulado\n    \n    while True: #4. loop infinito\n\n        line: str = input() #5. entrada de linha\n        args: list[str] = line.split(\" \") #6. lista de palavras \n        print(\"$\" + line)\n        \n        if args[0] == \"end\":\n            break\n\n        elif args[0] == \"criar\":\n            color = args[1]\n            size = args[2]\n            toalha = Towel(color, size)\n\n        elif args[0] == \"mostrar\":\n            print(toalha)\n\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            toalha.dry(amount)\n\n        elif args[0] == \"seca\":\n            if toalha.isDry():\n                print (\"sim\")\n            else:\n                print(\"n\u00e3o\")\n\n        else:\n            print (\"fail: comando inv\u00e1lido\")\n\nmain() #1. c\u00f3digo inicia\n\n    ",
            "lines": "66"
        }
    ]
}